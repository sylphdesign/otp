const { Markup } = require("telegraf");

class MenuBuilder {
  constructor() {
    this.menus = this.createMenus();
  }

  createMenus() {
    return {
      // Main Menu
      main: Markup.keyboard([
        ["üß† ALADDIN AI", "üìä Portfolio"],
        ["üö® Alerts", "üìà Analysis"],
        ["üí∞ P&L Report", "üéØ Daily Plan"],
        ["‚öôÔ∏è Settings", "‚ùì Help"],
      ]).resize(),

      // ALADDIN Menu
      aladdin: Markup.keyboard([
        ["üìã Daily Plan", "üìÖ Weekly Strategy"],
        ["üîç Market Scan", "üí° Ask ALADDIN"],
        ["üéØ My Positions", "‚¨ÖÔ∏è Back"],
      ]).resize(),

      // Portfolio Menu
      portfolio: Markup.keyboard([
        ["üì∏ Upload Screenshot", "üìä View Positions"],
        ["üö® Exit Alerts", "üìà Performance"],
        ["üíπ Compare Today", "‚¨ÖÔ∏è Back"],
      ]).resize(),

      // Alerts Menu
      alerts: Markup.keyboard([
        ["üîî Active Alerts", "‚úÖ Executed Trades"],
        ["‚ö° Test Alert", "üéØ Alert Settings"],
        ["üì± Notification Test", "‚¨ÖÔ∏è Back"],
      ]).resize(),

      // Analysis Menu
      analysis: Markup.keyboard([
        ["üîç Analyze Stock", "üìä Top Movers"],
        ["üé≤ Options Flow", "üìà Market Trends"],
        ["üíé Hidden Gems", "‚¨ÖÔ∏è Back"],
      ]).resize(),

      // Quick Actions (Inline Keyboard)
      quickActions: Markup.inlineKeyboard([
        [
          Markup.button.callback("‚úÖ Execute", "execute"),
          Markup.button.callback("‚ùå Skip", "skip"),
        ],
        [
          Markup.button.callback("üìä More Info", "moreinfo"),
          Markup.button.callback("‚è∞ Snooze", "snooze"),
        ],
      ]),

      // Position Actions
      positionActions: (symbol) =>
        Markup.inlineKeyboard([
          [
            Markup.button.callback("üìà Buy More", `buy_${symbol}`),
            Markup.button.callback("üìâ Sell", `sell_${symbol}`),
          ],
          [
            Markup.button.callback("üéØ Set Alert", `alert_${symbol}`),
            Markup.button.callback("üìä Analysis", `analyze_${symbol}`),
          ],
        ]),

      // Confirmation
      confirm: Markup.inlineKeyboard([
        [
          Markup.button.callback("‚úÖ Yes", "confirm_yes"),
          Markup.button.callback("‚ùå No", "confirm_no"),
        ],
      ]),

      // Remove keyboard
      remove: Markup.removeKeyboard(),
    };
  }

  // Get specific menu
  getMenu(menuName) {
    return this.menus[menuName] || this.menus.main;
  }

  // Create custom inline keyboard
  createInlineKeyboard(buttons) {
    return Markup.inlineKeyboard(buttons);
  }

  // Create option chain menu
  createOptionChainMenu(options) {
    const buttons = options.map((opt) => [
      Markup.button.callback(
        `${opt.symbol} $${opt.strike}${opt.type[0].toUpperCase()} - ${
          opt.daysLeft
        }d`,
        `option_${opt.symbol}_${opt.strike}_${opt.type}`
      ),
    ]);

    return Markup.inlineKeyboard(buttons);
  }

  // Create time-based alerts menu
  createAlertTimesMenu() {
    return Markup.inlineKeyboard([
      [
        Markup.button.callback("‚è∞ 9:30 AM", "alert_time_0930"),
        Markup.button.callback("‚è∞ 10:00 AM", "alert_time_1000"),
      ],
      [
        Markup.button.callback("‚è∞ 2:00 PM", "alert_time_1400"),
        Markup.button.callback("‚è∞ 3:30 PM", "alert_time_1530"),
      ],
      [
        Markup.button.callback("üîÑ Every Hour", "alert_time_hourly"),
        Markup.button.callback("‚ùå Cancel", "alert_time_cancel"),
      ],
    ]);
  }
}

module.exports = MenuBuilder;
